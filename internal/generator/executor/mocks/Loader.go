// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	types "go/types"

	mock "github.com/stretchr/testify/mock"
)

// Loader is an autogenerated mock type for the Loader type
type Loader struct {
	mock.Mock
}

// LoadAll provides a mock function with given fields: path
func (_m *Loader) LoadAll(path string) (map[string]*types.Interface, error) {
	ret := _m.Called(path)

	var r0 map[string]*types.Interface
	if rf, ok := ret.Get(0).(func(string) map[string]*types.Interface); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*types.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadMatched provides a mock function with given fields: path, expressions
func (_m *Loader) LoadMatched(path string, expressions []string) (map[string]*types.Interface, error) {
	ret := _m.Called(path, expressions)

	var r0 map[string]*types.Interface
	if rf, ok := ret.Get(0).(func(string, []string) map[string]*types.Interface); ok {
		r0 = rf(path, expressions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*types.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(path, expressions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
