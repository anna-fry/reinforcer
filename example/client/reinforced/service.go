// Code generated by reinforcer, DO NOT EDIT.

package reinforced

import "context"

type targetService interface {
	GetData() ([]byte, error)
}
type Service struct {
	*base
	delegate targetService
}

func NewService(delegate targetService, runnerFactory runnerFactory, options ...Option) *Service {
	if delegate == nil {
		panic("provided nil delegate")
	}
	if runnerFactory == nil {
		panic("provided nil runner factory")
	}
	c := &Service{
		base: &base{
			errorPredicate: RetryAllErrors,
			runnerFactory:  runnerFactory,
		},
		delegate: delegate,
	}
	for _, o := range options {
		o(c.base)
	}
	return c
}
func (s *Service) GetData() ([]byte, error) {
	var nonRetryableErr error
	var r0 []byte
	err := s.run(context.Background(), ServiceMethods.GetData, func(_ context.Context) error {
		var err error
		r0, err = s.delegate.GetData()
		if s.errorPredicate(ServiceMethods.GetData, err) {
			return err
		}
		nonRetryableErr = err
		return nil
	})
	if nonRetryableErr != nil {
		return r0, nonRetryableErr
	}
	return r0, err
}
