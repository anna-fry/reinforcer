// Code generated by reinforcer, DO NOT EDIT.

package reinforced

import "context"

type targetClient interface {
	GenerateGreeting(ctx context.Context, arg1 string) (string, error)
	SayHello(ctx context.Context, arg1 string) error
}
type Client struct {
	*base
	delegate targetClient
}

func NewClient(delegate targetClient, runnerFactory runnerFactory, options ...Option) *Client {
	if delegate == nil {
		panic("provided nil delegate")
	}
	if runnerFactory == nil {
		panic("provided nil runner factory")
	}
	c := &Client{
		base: &base{
			errorPredicate: RetryAllErrors,
			runnerFactory:  runnerFactory,
		},
		delegate: delegate,
	}
	for _, o := range options {
		o(c.base)
	}
	return c
}
func (c *Client) GenerateGreeting(ctx context.Context, arg1 string) (string, error) {
	var nonRetryableErr error
	var r0 string
	err := c.run(ctx, "GenerateGreeting", func(ctx context.Context) error {
		var err error
		r0, err = c.delegate.GenerateGreeting(ctx, arg1)
		if c.errorPredicate("GenerateGreeting", err) {
			return err
		}
		nonRetryableErr = err
		return nil
	})
	if nonRetryableErr != nil {
		return r0, nonRetryableErr
	}
	return r0, err
}
func (c *Client) SayHello(ctx context.Context, arg1 string) error {
	var nonRetryableErr error
	err := c.run(ctx, "SayHello", func(ctx context.Context) error {
		var err error
		err = c.delegate.SayHello(ctx, arg1)
		if c.errorPredicate("SayHello", err) {
			return err
		}
		nonRetryableErr = err
		return nil
	})
	if nonRetryableErr != nil {
		return nonRetryableErr
	}
	return err
}
